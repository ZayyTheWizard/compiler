// Whitespace rule
WHITESPACE = _{ " " | "\t" | "\n" }

// Keywords
keyword = _{ "let" | "if" | "for" | "while" | "return" | "func" | "main" | "true" | "false" }

// Identifiers
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// Literals
string = @{ "\"" ~ (identifier ~ WHITESPACE | identifier)* ~ "\"" }
number = @{ ASCII_DIGIT+ }
bool = @{"true" | "false"}
float = @{ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+}

// Operators
operator = _{ "+" | "-" | "*" | "/" | "<" | ">" | "=" | "==" | "+=" | "<=" | ">="}

// Punctuation
punctuation = _{ "[" | "]" | "{" | "}" | "(" | ")" | ";" | "," }

// Expressions and statements
expression = _{UnaryExpr | BinaryExpr | number | string | "(" ~ expression ~ ")" | identifier ~ "." ~ identifier ~ "(" ~ ")" | bool | identifier}
UnaryExpr = { operator ~ number }
BinaryExpr = { number ~ (operator ~ expression)+ | identifier ~ (operator ~ expression)+}
statement  =  {
    "let" ~ identifier ~ "=" ~ expression
  | "if" ~ "(" ~ expression ~ ")" ~ "{" ~ statement* ~ "}"
  | "for" ~ identifier ~ "=" ~ expression ~ ";" ~ expression ~ ";" ~ expression ~ "{" ~ statement* ~ "}"
  | "while" ~ "(" ~ expression ~ ")" ~ "{" ~ statement* ~ "}"
  | "return" ~ expression ~ ";"
  | identifier ~ operator ~ expression 
  | identifier ~ "(" ~ ")"
}

// Main function
main_function = { "func" ~ "main" ~ "(" ~ ")" ~ "{" ~ statement* ~ "}" }

// Program
program = { SOI ~ main_function ~ EOI }