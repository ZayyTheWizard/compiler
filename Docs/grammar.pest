Program = _{ SOI ~ (Function)+ ~ EOI }

Function  = { "func" ~ Ident ~ OBrac ~ (Ident ~ "," | Ident)* ~ CBrac ~ (Ocurly ~ (Statement)* ~ Ccurly) }
Statement = { IF | WHILE | FOR | LetDec | Expression }

Expression   = { IntLit | StringLit | float | Ident | FuncCallExpr | BinaryExpr | "+=" ~ Expression | "-=" ~ Expression }
FuncCallExpr = { PrimaryExpr ~ OBrac ~ (Expression ~ "," | Expression) ~ CBrac }
BinaryExpr   = { PrimaryExpr ~ BinaryOp ~ Expression }

PrimaryExpr = { IntLit | StringLit | float | Ident | "(" ~ Expression ~ ")" }

IF     = { "if" ~ OBrac ~ Expression ~ CBrac ~ (Ocurly ~ Statement ~ Ccurly) }
FOR    = { "for" ~ OBrac ~ Expression ~ CBrac ~ (Ocurly ~ Statement ~ Ccurly) }
WHILE  = { "while" ~ OBrac ~ Expression ~ CBrac ~ (Ocurly ~ Statement ~ Ccurly) }
RETURN = { "return" ~ Expression ~ ";" }
LetDec = { "let" ~ Ident ~ "=" ~ Expression | "let" ~ Ident }

Ocurly = { "{" }
Ccurly = { "}" }
OBrac  = { "(" }
CBrac  = { ")" }

BinaryOp    = { OpOr | OpAnd | OpLess | OpLessEq | OpGreater | OpGreaterEq | OpNotEq | OpEq | OpMinEq | OpPlusEq | Comma }
OpOr        = { "||" | "or" }
OpAnd       = { "&&" | "and" }
OpLess      = { "<" }
OpLessEq    = { "<=" }
OpGreater   = { ">" }
OpGreaterEq = { ">=" }
OpNotEq     = { "!=" }
OpEq        = { "==" }
OpMinEq     = { "-=" }
OpPlusEq    = { "+=" }
Comma       = { "," }

Ident     =  { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)+ | ASCII_ALPHA}
IntLit    = @{ ("-"? ~ ASCII_DIGIT)+ }
float     = @{ (ASCII_DIGIT)+ ~ "." ~ (ASCII_DIGIT)+ }
StringLit = @{ "\"" ~ (ASCII_ALPHANUMERIC | " ")* ~ "\"" }

COMMENT    = _{ "//" ~ WHITESPACE }
WHITESPACE = _{ " " | "\n" | "\t" }